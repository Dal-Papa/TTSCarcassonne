--these functions are typically used when a player picks up an object to be placed. They will create
--a temporary object wherever a legal move can be made, which will be deleted when the object is released.

TILE_MARKER_COLOR = {r=49/255, g=179/255, b=43/255, a=75/255}

function showTileMarkers(newTile)
    local tileMarkers = {}
    for x, tileColumn in pairs(tileGrid) do
        for z, tileLocation in pairs(tileColumn) do
            for side, sideDelta in ipairs(SIDE_DELTA) do
                if tileMarkers[x + sideDelta.x] == nil then
                    tileMarkers[x + sideDelta.x] = {}
                end
                if tileMarkers[x + sideDelta.x][z + sideDelta.z] == nil then
                    tileMarkers[x + sideDelta.x][z + sideDelta.z] = false
                    for tileRotation=1, 4 do
                        if isValidTileLocation(newTile, tileRotation, x + sideDelta.x, z + sideDelta.z, false) then
                            tileMarkers[x + sideDelta.x][z + sideDelta.z] = true
                        end
                    end
                end
            end
        end
    end
    local hasTileLocation = false
    for x, tileColumn in pairs(tileMarkers) do
        for z, tileLocation in pairs(tileColumn) do
            if tileLocation == true then
                local params = {}
                params.type = "BlockSquare"
                params.position = {(x * TILE_SPACING) - MIDDLE_OFFSET.x, 1.0, (z * TILE_SPACING) - MIDDLE_OFFSET.z}
                params.scale = {1.5, 0.1, 1.5}
                params.callback_owner = Global
                params.callback = "identifyFeature"
                params.sound = false
                local newObject = spawnObject(params)
                table.insert(featureMarkers, newObject)
                newObject.setColorTint(TILE_MARKER_COLOR)
                newObject.getComponent("BoxCollider").set("enabled", false)
                hasTileLocation = true
            end
        end
    end
    if not hasTileLocation then
        if not newTile.getVar('isStartingPiece') then
            allGameMessage({"MESSAGE_HINTS_NO_TILE_LOCATION"}, NEUTRAL_COLOR)
        elseif startingTile_GUID == nil then
            allGameMessage(({"MESSAGE_HINTS_STARTING_TILE"}), NEUTRAL_COLOR)
        end
    end
    return 1
end

--show all possible locations where a figure can be put
--featuresToMark - features that have not yet been checked for marking
--positionsToVisit - list of positions for each tile (can be pruned as we search to save time)
function showFigureMarkers()
    local newFigure = gPickedUpObject
    getActiveFigures()
    local locationMarkers = {}
    locationMarkers[lastPlacedTileX] = {}
    locationMarkers[lastPlacedTileX][lastPlacedTileZ] = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    local specialFeatureLocations = tileGrid[lastPlacedTileX][lastPlacedTileZ].specialFeatureLocations
    if specialFeatureLocations ~= nil then
        for specialFeatureNum, specialFeature in pairs(specialFeatureLocations) do
            if specialFeature.nameOfFeature ~= 'Tower Foundation' then
                table.insert(positionsToVisit, specialFeatureNum+12)
            end
        end
    end
    for featureMapPosition=1, 12 do
        if newFigure.getVar('figureName') ~= 'Barn' or featureMapPosition > 4 and featureMapPosition % 2 == 1 then
            table.insert(positionsToVisit, featureMapPosition)
        end
    end

    local x = lastPlacedTileX
    local z = lastPlacedTileZ

    for _, featureMapPosition in ipairs(positionsToVisit) do
        local featureNum = getFeatureNumAt(x, z, featureMapPosition)
        if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
            if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                setLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                featuresToMark[featureNum] = nil
            end
        end
    end
    --uncapped towers
    if controlPanelSettings['TowerTowers'] and table.contains(MEEPLE_TYPES, newFigure.getVar('figureName')) then
        --all tower locations are candidates for placing followers if they are legally placed
        for _, obj in ipairs(getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()) do
            if obj.getVar('figureName') == 'Tower' then
                local xIndex, zIndex, xPosition, zPosition = getFigureTileLocation(obj)
                if tileGridOccupied(xIndex, zIndex) then
                    local closestFeatureMapPosition = findClosestPosition(xIndex, zIndex, xPosition, zPosition)
                    local featureNum = getFeatureNumAt(xIndex, zIndex, closestFeatureMapPosition)
                    if featureNum ~= nil and isValidFigureLocation(newFigure, xIndex, zIndex, closestFeatureMapPosition, featureNum, false) then
                        if locationMarkers[xIndex] == nil then
                            locationMarkers[xIndex] = {}
                        end
                        if locationMarkers[xIndex][zIndex] == nil then
                            locationMarkers[xIndex][zIndex] = {}
                        end
                        if locationMarkers[xIndex][zIndex][closestFeatureMapPosition] == nil then
                            locationMarkers[xIndex][zIndex][closestFeatureMapPosition] = 0
                        end
                        locationMarkers[xIndex][zIndex][closestFeatureMapPosition] = locationMarkers[xIndex][zIndex][closestFeatureMapPosition] + 1
                    end
                end
            end
        end
    end
    --wheel of fortune crown spaces
    if controlPanelSettings['WoFCrowns'] and table.contains(MEEPLE_TYPES, newFigure.getVar('figureName')) then
        for _, tileIndex in ipairs({1, 2, 3, 4, 5, 8, 9, 12, 14, 15}) do --these are the indexes of the tiles that have crown features on them
            local obj = getObjectFromGUID(EXPANSION_BAGS['WoF'].contents['WoFStartingTiles'].contents[tileIndex].guid)
            local xIndex, zIndex, _, _ = getFigureTileLocation(obj)
            if tileGridOccupied(xIndex, zIndex) then
                local positionsToVisit = {}
                local specialFeatureLocations = tileGrid[xIndex][zIndex].specialFeatureLocations
                if specialFeatureLocations ~= nil then
                    for specialFeatureNum, specialFeature in pairs(specialFeatureLocations) do
                        if string.sub(specialFeature.nameOfFeature,1,6) == 'Crown-' then
                            table.insert(positionsToVisit, specialFeatureNum+12)
                        end
                    end
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)

                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidFigureLocation(newFigure, xIndex, zIndex, featureMapPosition, featureNum, false) then
                            setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                end
            end
        end
    end
    --magic portal
    if tileHasMagicPortal and not hasAlreadyUsedMagicPortal and table.contains(FOLLOWER_TYPES, newFigure.getVar('figureName')) then
        lastFrameTime = os.clock()
        allGameMessage(({"MESSAGE_HINTS_MAGIC_PORTAL_CALCULATING"}), NEUTRAL_COLOR)

        --prune features that don't have openings
        for featureNum, feature in pairs(featuresToMark) do
            if feature.numOpenings == 0 then
                featuresToMark[featureNum] = nil
            end
        end

        for x, tileColumn in pairs(tileGrid) do
            for z, tileLocation in pairs(tileColumn) do
                local positionsToVisit = {}
                local specialFeatureLocations = tileLocation.specialFeatureLocations
                if specialFeatureLocations ~= nil then
                    for specialFeatureNum, _ in pairs(specialFeatureLocations) do
                        table.insert(positionsToVisit, specialFeatureNum+12)
                    end
                end
                for featureMapPosition=1, 12 do
                    table.insert(positionsToVisit, featureMapPosition)
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(x, z, featureMapPosition)
                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                            setLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                    if os.clock() - lastFrameTime > FRAME_TIME then
                        lastFrameTime = lastFrameTime + FRAME_TIME
                        coroutine.yield(0)
                    end
                    --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                    if (turnState ~= 'awaiting figure decision' and turnState ~= 'awaiting phantom decision') or newFigure.held_by_color == nil then
                        return 1
                    end
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showTowerMarkers()
    local newFigure = gPickedUpObject
    getActiveFigures()
    local locationMarkers = {}
    locationMarkers[lastPlacedTileX] = {}
    locationMarkers[lastPlacedTileX][lastPlacedTileZ] = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    lastFrameTime = os.clock()
    allGameMessage(({"MESSAGE_HINTS_TOWER_CALCULATING"}), NEUTRAL_COLOR)

    for x, tileColumn in pairs(tileGrid) do
        for z, tileLocation in pairs(tileColumn) do
            local positionsToVisit = {}
            local specialFeatureLocations = tileLocation.specialFeatureLocations
            if specialFeatureLocations ~= nil then
                for specialFeatureNum, specialFeature in pairs(specialFeatureLocations) do
                    if specialFeature.nameOfFeature == 'Tower Foundation' then
                        table.insert(positionsToVisit, specialFeatureNum+12)
                    end
                end
            end

            --since only specialFeatures are used, and since special feature positions are treated the same in the
            --context of both featureMapPositions and tilePositions, they can be used interchangably here
            for _, featureMapPosition in ipairs(positionsToVisit) do
                local featureNum = getFeatureNumAt(x, z, featureMapPosition)

                if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                    if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                        setLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                        featuresToMark[featureNum] = nil
                    end
                end
                if os.clock() - lastFrameTime > FRAME_TIME then
                    lastFrameTime = lastFrameTime + FRAME_TIME
                    coroutine.yield(0)
                end
                --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                if turnState ~= 'awaiting figure decision' or newFigure.held_by_color == nil then
                    return 1
                end
            end
        end
    end

    for _, obj in ipairs(getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()) do
        if obj.getVar('figureName') == 'Tower' then
            local xIndex, zIndex, xPosition, zPosition = getFigureTileLocation(obj)
            if locationMarkers[xIndex] ~= nil and locationMarkers[xIndex][zIndex] ~= nil then
                local closestFeatureMapPosition = findClosestPosition(xIndex, zIndex, xPosition, zPosition)
                if locationMarkers[xIndex][zIndex][closestFeatureMapPosition] ~= nil then
                    locationMarkers[xIndex][zIndex][closestFeatureMapPosition] = locationMarkers[xIndex][zIndex][closestFeatureMapPosition] + 1
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showFairyHighlights(newFigure)
    highlightedTiles = {}
    hasFairyLocation = false
    local objs = getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()
    for _, obj in ipairs(objs) do
        if obj.getVar('owner') == activePlayers[currentPlayer] and table.contains(FOLLOWER_TYPES, obj.getVar('figureName')) then
            local xIndex, zIndex, _, _ = getFigureTileLocation(obj)
            if tileGridOccupied(xIndex, zIndex) then
                if highlightedTiles[xIndex] == nil then highlightedTiles[xIndex] = {} end
                highlightedTiles[xIndex][zIndex] = true
                getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid).highlightOn(player_color_tints[activePlayers[currentPlayer]])
                hasFairyLocation = true
            end
        end
    end
    if not hasFairyLocation then
        allGameMessage(({"MESSAGE_HINTS_NO_FAIRY_LOCATION"}), NEUTRAL_COLOR)
    end
    return 1
end

function showWagonFeatureMarkers(newFigure)
    local locationMarkers = {}
    local wagonFeatureNum = wagonFeatures[activePlayers[currentMiniTurn]]
    if linkedFeatures['Road Intersection'][wagonFeatureNum] == nil then
        allGameMessage("ERROR: There is no valid location to put this figure. Something went horribly wrong. Tell the dev.", NEUTRAL_COLOR)
        return
    end

    local linkedRoadFeatures = table.shallow_copy(linkedFeatures['Road Intersection'][wagonFeatureNum])

    --trim the features that are already complete
    for linkedFeatureNum, _ in pairs(linkedRoadFeatures) do
        if featureList[linkedFeatureNum] ~= nil then
            if table.contains(CLOISTER_FEATURES, featureList[linkedFeatureNum].nameOfFeature) then
                local numOpenings = 8
                for x=-1, 1 do
                    for z=-1, 1 do
                        if not (x == 0 and z == 0) and tileGridOccupied(featureList[linkedFeatureNum].featureLocation.x + x, featureList[linkedFeatureNum].featureLocation.z + z) then
                            numOpenings = numOpenings - 1
                        end
                    end
                end
                if numOpenings <= 0 then
                    linkedRoadFeatures[linkedFeatureNum] = nil
                end
            elseif featureList[linkedFeatureNum].numOpenings == 0 then
                linkedRoadFeatures[linkedFeatureNum] = nil
            end
        else
            linkedRoadFeatures[linkedFeatureNum] = nil
        end
    end

    for x, tileColumn in pairs(tileGrid) do
        for z, tileLocation in pairs(tileColumn) do
            local positionsToVisit = {}
            local specialFeatureLocations = tileLocation.specialFeatureLocations
            if specialFeatureLocations ~= nil then
                for specialFeatureNum, _ in pairs(specialFeatureLocations) do
                    table.insert(positionsToVisit, specialFeatureNum+12)
                end
            end
            for featureMapPosition=1, 12 do
                table.insert(positionsToVisit, featureMapPosition)
            end

            for _, featureMapPosition in ipairs(positionsToVisit) do
                local featureNum = getFeatureNumAt(x, z, featureMapPosition)
                if linkedRoadFeatures[featureNum] ~= nil then
                    if isValidWagonLocation(newFigure, featureNum, false) then
                        setLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                        linkedRoadFeatures[featureNum] = nil
                    end
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showFlierFeatureMarkers(newFigure)
    local xIndex = lastPlacedTileX + flierOffset.x
    local zIndex = lastPlacedTileZ + flierOffset.z
    local locationMarkers = {}
    locationMarkers[xIndex] = {}
    locationMarkers[xIndex][zIndex] = {}

    local featuresToMark = {}

    local positionsToVisit = { }

    local specialFeatureLocations = tileGrid[xIndex][zIndex].specialFeatureLocations
    if specialFeatureLocations ~= nil then
        for specialFeatureNum, _ in pairs(specialFeatureLocations) do
            table.insert(positionsToVisit, specialFeatureNum+12)
        end
    end
    for featureMapPosition=1, 12 do
        table.insert(positionsToVisit, featureMapPosition)
    end

    for _, featureMapPosition in ipairs(positionsToVisit) do
        local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
        if featureNum ~= nil and featuresToMark[featureNum] == nil then
            if isValidFlierLocation(newFigure, featureNum, false) then
                setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                featuresToMark[featureNum] = true
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showToCoCFeatureMarkers(newFigure)
    local locationMarkers = {}
    for _, cocTileSetting in ipairs(EXPANSION_BAGS['CoC'].contents['CoCStartingTiles'].contents) do
        local cocTile = getObjectFromGUID(cocTileSetting.guid)
        local xIndex, zIndex, _, _ = getFigureTileLocation(cocTile)

        local positionsToVisit = {}
        local specialFeatureLocations = tileGrid[xIndex][zIndex].specialFeatureLocations
        if specialFeatureLocations ~= nil then
            for specialFeatureNum, _ in pairs(specialFeatureLocations) do
                table.insert(positionsToVisit, specialFeatureNum+12)
            end
        end
        for featureMapPosition=1, 12 do
            table.insert(positionsToVisit, featureMapPosition)
        end

        for _, featureMapPosition in ipairs(positionsToVisit) do
            local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
            if featureNum ~= nil then
                if isValidCoCLocation(newFigure, featureNum, false) then
                    setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

--show legal positions where figures from CoC can be placed
function showFromCoCFeatureMarkers()
    local newFigure = gPickedUpObject
    local locationMarkers = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    if turnState == 'prompt moving from carcassonne' then
        --check the last placed tile for completed features
        local xIndex = lastPlacedTileX
        local zIndex = lastPlacedTileZ
        locationMarkers[xIndex] = {}
        locationMarkers[xIndex][zIndex] = {}

        local specialFeatureLocations = tileGrid[xIndex][zIndex].specialFeatureLocations
        if specialFeatureLocations ~= nil then
            for specialFeatureNum, specialFeature in pairs(specialFeatureLocations) do
                if specialFeature.nameOfFeature ~= 'Tower Foundation' then
                    table.insert(positionsToVisit, specialFeatureNum+12)
                end
            end
        end
        for featureMapPosition=1, 12 do
            table.insert(positionsToVisit, featureMapPosition)
        end
        for _, featureMapPosition in ipairs(positionsToVisit) do
            local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
            if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                if isValidLocationFromCoC(newFigure, featureNum, false) then
                    setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                    featuresToMark[featureNum] = nil
                end
            end
        end
        --also check neighbors for cloisters that were completed
        for _, offset in ipairs(DIAGONAL_DELTA) do
            local neighborX = lastPlacedTileX + offset.x
            local neighborZ = lastPlacedTileZ + offset.z
            if tileGridOccupied(neighborX, neighborZ) then
                local specialFeatureLocations = tileGrid[neighborX][neighborZ].specialFeatureLocations
                if specialFeatureLocations ~= nil then
                    for specialFeatureNum, specialFeature in pairs(specialFeatureLocations) do
                        if specialFeature.nameOfFeature ~= 'Tower Foundation' then
                            local featureMapPosition = specialFeatureNum+12
                            local featureNum = getFeatureNumAt(neighborX, neighborZ, featureMapPosition)
                            if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                                if isValidLocationFromCoC(newFigure, featureNum, false) then
                                    setLocationMarker(locationMarkers, neighborX, neighborZ, featureMapPosition, 0)
                                    featuresToMark[featureNum] = nil
                                end
                            end
                        end
                    end
                end
            end
        end
    elseif turnState == 'game over - prompt moving from carcassonne' then
        lastFrameTime = os.clock()
        allGameMessage(({"MESSAGE_HINTS_COC_CALCULATING"}), NEUTRAL_COLOR)

        for xIndex, tileColumn in pairs(tileGrid) do
            for zIndex, tileLocation in pairs(tileColumn) do
                local positionsToVisit = {}
                local specialFeatureLocations = tileLocation.specialFeatureLocations
                if specialFeatureLocations ~= nil then
                    for specialFeatureNum, _ in pairs(specialFeatureLocations) do
                        table.insert(positionsToVisit, specialFeatureNum+12)
                    end
                end
                for featureMapPosition=1, 12 do
                    table.insert(positionsToVisit, featureMapPosition)
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidLocationFromCoC(newFigure, featureNum, false) then
                            setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                    if os.clock() - lastFrameTime > FRAME_TIME then
                        lastFrameTime = lastFrameTime + FRAME_TIME
                        coroutine.yield(0)
                    end
                    --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                    if turnState ~= 'game over - prompt moving from carcassonne' or newFigure.held_by_color == nil then
                        return 1
                    end
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showLocationMarkers(newFigure, locationMarkers)
    local hasFigureLocation = false
    for xIndex, tileColumn in pairs(locationMarkers) do
        for zIndex, tileLocation in pairs(tileColumn) do
            for featureMapPosition, markerHeight in pairs(tileLocation) do
                local x = nil
                local z = nil
                if newFigure.getVar('figureName') ~= 'Barn' then
                    x, z = getFeatureLocation(xIndex, zIndex, featureMapPosition)
                else --put the marker on the corner instead of the feature position
                    if featureMapPosition % 2 == 1 then --pick one arbitrary position (assuming both were valid), then get the corner closest to it
                        local side = math.floor((featureMapPosition - 3) / 2)
                        x, z = rotateCoordinates(-0.5, 0.5, ((8 - side) % 4) + 1)
                    end
                end
                if x ~= nil and z ~= nil then
                    local params = {}
                    params.type = "BlockSquare"
                    params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, 1.5 + markerHeight * TOWER_HEIGHT, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                    params.scale = {0.25, 0.25, 0.25}
                    params.callback_owner = Global
                    params.callback = "identifyFeature"
                    params.sound = false
                    local newObject = spawnObject(params)
                    table.insert(featureMarkers, newObject)
                    newObject.getComponent("BoxCollider").set("enabled", false)
                    hasFigureLocation = true
                end
            end
        end
    end
    if not hasFigureLocation then
        allGameMessage(({"MESSAGE_HINTS_NO_FIGURE_LOCATION"}), NEUTRAL_COLOR)
    end
end

function setLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, markerValue)
    if locationMarkers[xIndex] == nil then
        locationMarkers[xIndex] = {}
    end
    if locationMarkers[xIndex][zIndex] == nil then
        locationMarkers[xIndex][zIndex] = {}
    end
    locationMarkers[xIndex][zIndex][featureMapPosition] = markerValue
end
